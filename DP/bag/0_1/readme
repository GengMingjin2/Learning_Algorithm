**背包问题(**Knapsack problem)是一种组合优化的NP完全问题。
问题描述为：给定一组物品，每种物品都有自己的重量和价格，
在限定的总重量内，我们如何选择，才能使得物品的总价格最高。
问题的名称来源于如何选择最合适的物品放置于给定背包中。

解决思路：动态规划，对每一件物品遍历背包容量，当背包可容纳值大于等于当前物品，
与之前已放进去的物品所得价值进行对比，考虑是否需要置换。

递归定义如下：
          0, if i == 0 or w == 0,
c[i, w] = c[i - 1, w], if wi > w,
          max(vi + c[i - 1, w - wi], c[i - 1, w]), if i > 0 and w >= wi.