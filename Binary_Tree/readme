#平衡二叉树
——生成一个平衡二叉树以及三种遍历

#搜索二叉树
——生成（插入新节点）一个搜索二叉树以及三种遍历，寻找极值节点以及删除节点

#遍历
主要包括深度优先遍历和广度优先遍历：
深度优先遍历：前序遍历、中序遍历和后序遍历
广度优先遍历：层序遍历

区别：
通常深度优先搜索法遍历时不全部保留结点，遍历完后的结点从栈中弹出删去，
这样，一般在栈中存储的结点数就是二叉树的深度值，因此它占用空间较少。
所以，当搜索树的结点较多，用其它方法易产生内存溢出时，深度优先搜索不
失为一种有效的求解方法。 但深度优先搜素算法有回溯操作(即有入栈、出栈操作)，
运行速度慢。

广度优先搜索算法，一般需存储产生的所有结点，占用的存储空间要比深度优先搜索大得多，
因此，程序设计中，必须考虑溢出和节省内存空间的问题。但广度优先搜索法一般无回溯操作，
即入栈和出栈的操作，所以运行速度比深度优先搜索要快些。
